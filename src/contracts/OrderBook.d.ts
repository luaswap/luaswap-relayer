/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface OrderBookInterface extends ethers.utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "allHashes(uint256,uint256)": FunctionFragment;
    "createOrder(tuple)": FunctionFragment;
    "hashesOfFromToken(address,uint256,uint256)": FunctionFragment;
    "hashesOfMaker(address,uint256,uint256)": FunctionFragment;
    "hashesOfToToken(address,uint256,uint256)": FunctionFragment;
    "numberOfAllHashes()": FunctionFragment;
    "numberOfHashesOfFromToken(address)": FunctionFragment;
    "numberOfHashesOfMaker(address)": FunctionFragment;
    "numberOfHashesOfToToken(address)": FunctionFragment;
    "orderOfHash(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allHashes",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createOrder",
    values: [
      {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hashesOfFromToken",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hashesOfMaker",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hashesOfToToken",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfAllHashes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfHashesOfFromToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfHashesOfMaker",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfHashesOfToToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "orderOfHash",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allHashes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashesOfFromToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashesOfMaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashesOfToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfAllHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfHashesOfFromToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfHashesOfMaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfHashesOfToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orderOfHash",
    data: BytesLike
  ): Result;

  events: {
    "OrderCreated(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OrderCreated"): EventFragment;
}

export class OrderBook extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: OrderBookInterface;

  functions: {
    DOMAIN_SEPARATOR(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "DOMAIN_SEPARATOR()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    allHashes(
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "allHashes(uint256,uint256)"(
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    createOrder(
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createOrder(tuple)"(
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hashesOfFromToken(
      fromToken: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "hashesOfFromToken(address,uint256,uint256)"(
      fromToken: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    hashesOfMaker(
      maker: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "hashesOfMaker(address,uint256,uint256)"(
      maker: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    hashesOfToToken(
      toToken: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "hashesOfToToken(address,uint256,uint256)"(
      toToken: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    numberOfAllHashes(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "numberOfAllHashes()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    numberOfHashesOfFromToken(
      fromToken: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "numberOfHashesOfFromToken(address)"(
      fromToken: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    numberOfHashesOfMaker(
      maker: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "numberOfHashesOfMaker(address)"(
      maker: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    numberOfHashesOfToToken(
      toToken: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "numberOfHashesOfToToken(address)"(
      toToken: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    orderOfHash(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      maker: string;
      fromToken: string;
      toToken: string;
      amountIn: BigNumber;
      amountOutMin: BigNumber;
      recipient: string;
      deadline: BigNumber;
      v: number;
      r: string;
      s: string;
      0: string;
      1: string;
      2: string;
      3: BigNumber;
      4: BigNumber;
      5: string;
      6: BigNumber;
      7: number;
      8: string;
      9: string;
    }>;

    "orderOfHash(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      maker: string;
      fromToken: string;
      toToken: string;
      amountIn: BigNumber;
      amountOutMin: BigNumber;
      recipient: string;
      deadline: BigNumber;
      v: number;
      r: string;
      s: string;
      0: string;
      1: string;
      2: string;
      3: BigNumber;
      4: BigNumber;
      5: string;
      6: BigNumber;
      7: number;
      8: string;
      9: string;
    }>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

  allHashes(
    page: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "allHashes(uint256,uint256)"(
    page: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  createOrder(
    order: {
      maker: string;
      fromToken: string;
      toToken: string;
      amountIn: BigNumberish;
      amountOutMin: BigNumberish;
      recipient: string;
      deadline: BigNumberish;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createOrder(tuple)"(
    order: {
      maker: string;
      fromToken: string;
      toToken: string;
      amountIn: BigNumberish;
      amountOutMin: BigNumberish;
      recipient: string;
      deadline: BigNumberish;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hashesOfFromToken(
    fromToken: string,
    page: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "hashesOfFromToken(address,uint256,uint256)"(
    fromToken: string,
    page: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  hashesOfMaker(
    maker: string,
    page: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "hashesOfMaker(address,uint256,uint256)"(
    maker: string,
    page: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  hashesOfToToken(
    toToken: string,
    page: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "hashesOfToToken(address,uint256,uint256)"(
    toToken: string,
    page: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  numberOfAllHashes(overrides?: CallOverrides): Promise<BigNumber>;

  "numberOfAllHashes()"(overrides?: CallOverrides): Promise<BigNumber>;

  numberOfHashesOfFromToken(
    fromToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "numberOfHashesOfFromToken(address)"(
    fromToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  numberOfHashesOfMaker(
    maker: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "numberOfHashesOfMaker(address)"(
    maker: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  numberOfHashesOfToToken(
    toToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "numberOfHashesOfToToken(address)"(
    toToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  orderOfHash(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    maker: string;
    fromToken: string;
    toToken: string;
    amountIn: BigNumber;
    amountOutMin: BigNumber;
    recipient: string;
    deadline: BigNumber;
    v: number;
    r: string;
    s: string;
    0: string;
    1: string;
    2: string;
    3: BigNumber;
    4: BigNumber;
    5: string;
    6: BigNumber;
    7: number;
    8: string;
    9: string;
  }>;

  "orderOfHash(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    maker: string;
    fromToken: string;
    toToken: string;
    amountIn: BigNumber;
    amountOutMin: BigNumber;
    recipient: string;
    deadline: BigNumber;
    v: number;
    r: string;
    s: string;
    0: string;
    1: string;
    2: string;
    3: BigNumber;
    4: BigNumber;
    5: string;
    6: BigNumber;
    7: number;
    8: string;
    9: string;
  }>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

    allHashes(
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "allHashes(uint256,uint256)"(
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    createOrder(
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "createOrder(tuple)"(
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    hashesOfFromToken(
      fromToken: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "hashesOfFromToken(address,uint256,uint256)"(
      fromToken: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    hashesOfMaker(
      maker: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "hashesOfMaker(address,uint256,uint256)"(
      maker: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    hashesOfToToken(
      toToken: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "hashesOfToToken(address,uint256,uint256)"(
      toToken: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    numberOfAllHashes(overrides?: CallOverrides): Promise<BigNumber>;

    "numberOfAllHashes()"(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfHashesOfFromToken(
      fromToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "numberOfHashesOfFromToken(address)"(
      fromToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numberOfHashesOfMaker(
      maker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "numberOfHashesOfMaker(address)"(
      maker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numberOfHashesOfToToken(
      toToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "numberOfHashesOfToToken(address)"(
      toToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orderOfHash(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      maker: string;
      fromToken: string;
      toToken: string;
      amountIn: BigNumber;
      amountOutMin: BigNumber;
      recipient: string;
      deadline: BigNumber;
      v: number;
      r: string;
      s: string;
      0: string;
      1: string;
      2: string;
      3: BigNumber;
      4: BigNumber;
      5: string;
      6: BigNumber;
      7: number;
      8: string;
      9: string;
    }>;

    "orderOfHash(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      maker: string;
      fromToken: string;
      toToken: string;
      amountIn: BigNumber;
      amountOutMin: BigNumber;
      recipient: string;
      deadline: BigNumber;
      v: number;
      r: string;
      s: string;
      0: string;
      1: string;
      2: string;
      3: BigNumber;
      4: BigNumber;
      5: string;
      6: BigNumber;
      7: number;
      8: string;
      9: string;
    }>;
  };

  filters: {
    OrderCreated(hash: BytesLike | null): EventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    allHashes(
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allHashes(uint256,uint256)"(
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createOrder(
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createOrder(tuple)"(
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    hashesOfFromToken(
      fromToken: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hashesOfFromToken(address,uint256,uint256)"(
      fromToken: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashesOfMaker(
      maker: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hashesOfMaker(address,uint256,uint256)"(
      maker: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashesOfToToken(
      toToken: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hashesOfToToken(address,uint256,uint256)"(
      toToken: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numberOfAllHashes(overrides?: CallOverrides): Promise<BigNumber>;

    "numberOfAllHashes()"(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfHashesOfFromToken(
      fromToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "numberOfHashesOfFromToken(address)"(
      fromToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numberOfHashesOfMaker(
      maker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "numberOfHashesOfMaker(address)"(
      maker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numberOfHashesOfToToken(
      toToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "numberOfHashesOfToToken(address)"(
      toToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orderOfHash(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "orderOfHash(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DOMAIN_SEPARATOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allHashes(
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allHashes(uint256,uint256)"(
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createOrder(
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createOrder(tuple)"(
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hashesOfFromToken(
      fromToken: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hashesOfFromToken(address,uint256,uint256)"(
      fromToken: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashesOfMaker(
      maker: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hashesOfMaker(address,uint256,uint256)"(
      maker: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashesOfToToken(
      toToken: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hashesOfToToken(address,uint256,uint256)"(
      toToken: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberOfAllHashes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "numberOfAllHashes()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberOfHashesOfFromToken(
      fromToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "numberOfHashesOfFromToken(address)"(
      fromToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberOfHashesOfMaker(
      maker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "numberOfHashesOfMaker(address)"(
      maker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberOfHashesOfToToken(
      toToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "numberOfHashesOfToToken(address)"(
      toToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orderOfHash(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "orderOfHash(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
