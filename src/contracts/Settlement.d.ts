/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SettlementInterface extends ethers.utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "MAX_FEE_NUMERATOR()": FunctionFragment;
    "MAX_FEE_SPLIT_NUMERATOR()": FunctionFragment;
    "cancelOrder(tuple)": FunctionFragment;
    "canceledOfHash(bytes32)": FunctionFragment;
    "allCanceledHashes(bytes32)": FunctionFragment;
    "numberOfAllCanceledHashes()": FunctionFragment;
    "canceledHashesOfMaker(bytes32)": FunctionFragment;
    "factory()": FunctionFragment;
    "feeNumerator()": FunctionFragment;
    "feeSplitNumerator()": FunctionFragment;
    "feeSplitRecipient()": FunctionFragment;
    "fillOrder(tuple)": FunctionFragment;
    "fillOrders(tuple[])": FunctionFragment;
    "filledAmountInOfHash(bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sushi()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateFee(uint256)": FunctionFragment;
    "updateFeeSplit(uint256)": FunctionFragment;
    "weth()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_FEE_NUMERATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allCanceledHashes",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfAllCanceledHashes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_FEE_SPLIT_NUMERATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [
      {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "canceledOfHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeSplitNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeSplitRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrder",
    values: [
      {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrders",
    values: [
      {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "filledAmountInOfHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sushi", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeSplit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  encodeFunctionData(
    functionFragment: "allCanceledHashes",
    values: [BigNumberish, BigNumberish]
  ): string;
  decodeFunctionResult(
    functionFragment: "numberOfAllCanceledHashes",
    values?: undefined
  ): string;
  decodeFunctionResult(
    functionFragment: "MAX_FEE_NUMERATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_FEE_SPLIT_NUMERATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canceledOfHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeSplitNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeSplitRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fillOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fillOrders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "filledAmountInOfHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sushi", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeSplit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;

  events: {
    "FeeSplitTransferred(bytes32,address,uint256)": EventFragment;
    "FeeTransferred(bytes32,address,uint256)": EventFragment;
    "OrderCanceled(bytes32)": EventFragment;
    "OrderFilled(bytes32,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeSplitTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderFilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class Settlement extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SettlementInterface;

  functions: {
    DOMAIN_SEPARATOR(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "DOMAIN_SEPARATOR()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    MAX_FEE_NUMERATOR(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    allCanceledHashes(
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "allCanceledHashes(uint256,uint256)"(
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "MAX_FEE_NUMERATOR()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MAX_FEE_SPLIT_NUMERATOR(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "MAX_FEE_SPLIT_NUMERATOR()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    cancelOrder(
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelOrder(tuple)"(
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    canceledOfHash(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "canceledOfHash(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;
    numberOfAllCanceledHashes(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
    allCanceledHashes(
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "allCanceledHashes(uint256,uint256)"(
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "numberOfAllCanceledHashes()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
    factory(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "factory()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    feeNumerator(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "feeNumerator()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    feeSplitNumerator(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "feeSplitNumerator()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    feeSplitRecipient(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "feeSplitRecipient()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    fillOrder(
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "fillOrder(tuple)"(
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    fillOrders(
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "fillOrders(tuple[])"(
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    filledAmountInOfHash(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "filledAmountInOfHash(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    sushi(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "sushi()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateFee(
      _feeNumerator: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateFee(uint256)"(
      _feeNumerator: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateFeeSplit(
      _feeSplitNumerator: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateFeeSplit(uint256)"(
      _feeSplitNumerator: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    weth(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "weth()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

  MAX_FEE_NUMERATOR(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX_FEE_NUMERATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_FEE_SPLIT_NUMERATOR(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX_FEE_SPLIT_NUMERATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

  cancelOrder(
    order: {
      maker: string;
      fromToken: string;
      toToken: string;
      amountIn: BigNumberish;
      amountOutMin: BigNumberish;
      recipient: string;
      deadline: BigNumberish;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelOrder(tuple)"(
    order: {
      maker: string;
      fromToken: string;
      toToken: string;
      amountIn: BigNumberish;
      amountOutMin: BigNumberish;
      recipient: string;
      deadline: BigNumberish;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  canceledOfHash(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "canceledOfHash(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  factory(overrides?: CallOverrides): Promise<string>;

  "factory()"(overrides?: CallOverrides): Promise<string>;

  feeNumerator(overrides?: CallOverrides): Promise<BigNumber>;

  "feeNumerator()"(overrides?: CallOverrides): Promise<BigNumber>;

  feeSplitNumerator(overrides?: CallOverrides): Promise<BigNumber>;

  "feeSplitNumerator()"(overrides?: CallOverrides): Promise<BigNumber>;

  feeSplitRecipient(overrides?: CallOverrides): Promise<string>;

  "feeSplitRecipient()"(overrides?: CallOverrides): Promise<string>;

  fillOrder(
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "fillOrder(tuple)"(
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  fillOrders(
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "fillOrders(tuple[])"(
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  filledAmountInOfHash(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "filledAmountInOfHash(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;
  numberOfAllCanceledHashes(overrides?: CallOverrides): Promise<BigNumber>;

  "numberOfAllCanceledHashes()"(overrides?: CallOverrides): Promise<BigNumber>;
  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  sushi(overrides?: CallOverrides): Promise<string>;

  "sushi()"(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateFee(
    _feeNumerator: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateFee(uint256)"(
    _feeNumerator: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateFeeSplit(
    _feeSplitNumerator: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateFeeSplit(uint256)"(
    _feeSplitNumerator: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  weth(overrides?: CallOverrides): Promise<string>;

  "weth()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

    MAX_FEE_NUMERATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_FEE_NUMERATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE_SPLIT_NUMERATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_FEE_SPLIT_NUMERATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    cancelOrder(
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelOrder(tuple)"(
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    canceledOfHash(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "canceledOfHash(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    factory(overrides?: CallOverrides): Promise<string>;

    "factory()"(overrides?: CallOverrides): Promise<string>;

    feeNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    "feeNumerator()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeSplitNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    "feeSplitNumerator()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeSplitRecipient(overrides?: CallOverrides): Promise<string>;

    "feeSplitRecipient()"(overrides?: CallOverrides): Promise<string>;

    fillOrder(
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "fillOrder(tuple)"(
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fillOrders(
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "fillOrders(tuple[])"(
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    filledAmountInOfHash(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "filledAmountInOfHash(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    sushi(overrides?: CallOverrides): Promise<string>;

    "sushi()"(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFee(
      _feeNumerator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateFee(uint256)"(
      _feeNumerator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    allCanceledHashes(
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "allCanceledHashes(uint256,uint256)"(
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    updateFeeSplit(
      _feeSplitNumerator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateFeeSplit(uint256)"(
      _feeSplitNumerator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    weth(overrides?: CallOverrides): Promise<string>;

    "weth()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    FeeSplitTransferred(
      hash: BytesLike | null,
      recipient: string | null,
      amount: null
    ): EventFilter;

    FeeTransferred(
      hash: BytesLike | null,
      recipient: string | null,
      amount: null
    ): EventFilter;

    OrderCanceled(hash: BytesLike | null): EventFilter;

    OrderFilled(
      hash: BytesLike | null,
      amountIn: null,
      amountOut: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE_NUMERATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_FEE_NUMERATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE_SPLIT_NUMERATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_FEE_SPLIT_NUMERATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    cancelOrder(
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cancelOrder(tuple)"(
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    canceledOfHash(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canceledOfHash(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    "factory()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    "feeNumerator()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeSplitNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    "feeSplitNumerator()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeSplitRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    "feeSplitRecipient()"(overrides?: CallOverrides): Promise<BigNumber>;

    fillOrder(
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "fillOrder(tuple)"(
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    fillOrders(
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "fillOrders(tuple[])"(
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    filledAmountInOfHash(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "filledAmountInOfHash(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    sushi(overrides?: CallOverrides): Promise<BigNumber>;

    "sushi()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateFee(
      _feeNumerator: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateFee(uint256)"(
      _feeNumerator: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateFeeSplit(
      _feeSplitNumerator: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateFeeSplit(uint256)"(
      _feeSplitNumerator: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    "weth()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DOMAIN_SEPARATOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_FEE_NUMERATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MAX_FEE_NUMERATOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_FEE_SPLIT_NUMERATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allCanceledHashes(
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allCanceledHashes(uint256,uint256)"(
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;    
    
    "MAX_FEE_SPLIT_NUMERATOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelOrder(
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelOrder(tuple)"(
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    canceledOfHash(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canceledOfHash(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "factory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeNumerator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeNumerator()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeSplitNumerator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeSplitNumerator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeSplitRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeSplitRecipient()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fillOrder(
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "fillOrder(tuple)"(
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    fillOrders(
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "fillOrders(tuple[])"(
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    filledAmountInOfHash(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "filledAmountInOfHash(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    sushi(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "sushi()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateFee(
      _feeNumerator: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateFee(uint256)"(
      _feeNumerator: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateFeeSplit(
      _feeSplitNumerator: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateFeeSplit(uint256)"(
      _feeSplitNumerator: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "weth()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
